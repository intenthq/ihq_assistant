{
  "url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8",
  "id": 2371473328,
  "node_id": "PR_kwDOOC5crs6NWc-w",
  "html_url": "https://github.com/intenthq/ihq_assistant/pull/8",
  "diff_url": "https://github.com/intenthq/ihq_assistant/pull/8.diff",
  "patch_url": "https://github.com/intenthq/ihq_assistant/pull/8.patch",
  "issue_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/8",
  "number": 8,
  "state": "open",
  "locked": false,
  "title": "Added function calling to create linear ticket and removed langchain …",
  "user": {
    "login": "geo-harrison",
    "id": 176415250,
    "node_id": "U_kgDOCoPiEg",
    "avatar_url": "https://avatars.githubusercontent.com/u/176415250?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/geo-harrison",
    "html_url": "https://github.com/geo-harrison",
    "followers_url": "https://api.github.com/users/geo-harrison/followers",
    "following_url": "https://api.github.com/users/geo-harrison/following{/other_user}",
    "gists_url": "https://api.github.com/users/geo-harrison/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/geo-harrison/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/geo-harrison/subscriptions",
    "organizations_url": "https://api.github.com/users/geo-harrison/orgs",
    "repos_url": "https://api.github.com/users/geo-harrison/repos",
    "events_url": "https://api.github.com/users/geo-harrison/events{/privacy}",
    "received_events_url": "https://api.github.com/users/geo-harrison/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "body": "…logic to openai",
  "created_at": "2025-03-04T17:36:25Z",
  "updated_at": "2025-03-04T17:38:17Z",
  "closed_at": null,
  "merged_at": null,
  "merge_commit_sha": "d7cb9c16ba70d5f3cd4ded7c170d1fa00d9d2048",
  "assignee": null,
  "assignees": [],
  "requested_reviewers": [],
  "requested_teams": [],
  "labels": [],
  "milestone": null,
  "draft": false,
  "commits_url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8/commits",
  "review_comments_url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8/comments",
  "review_comment_url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/comments{/number}",
  "comments_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/8/comments",
  "statuses_url": "https://api.github.com/repos/intenthq/ihq_assistant/statuses/2e964f22deb60da0538c6a6c54e35386338500ca",
  "head": {
    "label": "intenthq:linear-ticket-creation",
    "ref": "linear-ticket-creation",
    "sha": "2e964f22deb60da0538c6a6c54e35386338500ca",
    "user": {
      "login": "intenthq",
      "id": 4499919,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ0OTk5MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4499919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/intenthq",
      "html_url": "https://github.com/intenthq",
      "followers_url": "https://api.github.com/users/intenthq/followers",
      "following_url": "https://api.github.com/users/intenthq/following{/other_user}",
      "gists_url": "https://api.github.com/users/intenthq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/intenthq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/intenthq/subscriptions",
      "organizations_url": "https://api.github.com/users/intenthq/orgs",
      "repos_url": "https://api.github.com/users/intenthq/repos",
      "events_url": "https://api.github.com/users/intenthq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/intenthq/received_events",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "repo": {
      "id": 942562478,
      "node_id": "R_kgDOOC5crg",
      "name": "ihq_assistant",
      "full_name": "intenthq/ihq_assistant",
      "private": false,
      "owner": {
        "login": "intenthq",
        "id": 4499919,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ0OTk5MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4499919?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/intenthq",
        "html_url": "https://github.com/intenthq",
        "followers_url": "https://api.github.com/users/intenthq/followers",
        "following_url": "https://api.github.com/users/intenthq/following{/other_user}",
        "gists_url": "https://api.github.com/users/intenthq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/intenthq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/intenthq/subscriptions",
        "organizations_url": "https://api.github.com/users/intenthq/orgs",
        "repos_url": "https://api.github.com/users/intenthq/repos",
        "events_url": "https://api.github.com/users/intenthq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/intenthq/received_events",
        "type": "Organization",
        "user_view_type": "public",
        "site_admin": false
      },
      "html_url": "https://github.com/intenthq/ihq_assistant",
      "description": "Hackathon Group 2 ",
      "fork": false,
      "url": "https://api.github.com/repos/intenthq/ihq_assistant",
      "forks_url": "https://api.github.com/repos/intenthq/ihq_assistant/forks",
      "keys_url": "https://api.github.com/repos/intenthq/ihq_assistant/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/intenthq/ihq_assistant/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/intenthq/ihq_assistant/teams",
      "hooks_url": "https://api.github.com/repos/intenthq/ihq_assistant/hooks",
      "issue_events_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/events{/number}",
      "events_url": "https://api.github.com/repos/intenthq/ihq_assistant/events",
      "assignees_url": "https://api.github.com/repos/intenthq/ihq_assistant/assignees{/user}",
      "branches_url": "https://api.github.com/repos/intenthq/ihq_assistant/branches{/branch}",
      "tags_url": "https://api.github.com/repos/intenthq/ihq_assistant/tags",
      "blobs_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/intenthq/ihq_assistant/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/intenthq/ihq_assistant/languages",
      "stargazers_url": "https://api.github.com/repos/intenthq/ihq_assistant/stargazers",
      "contributors_url": "https://api.github.com/repos/intenthq/ihq_assistant/contributors",
      "subscribers_url": "https://api.github.com/repos/intenthq/ihq_assistant/subscribers",
      "subscription_url": "https://api.github.com/repos/intenthq/ihq_assistant/subscription",
      "commits_url": "https://api.github.com/repos/intenthq/ihq_assistant/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/intenthq/ihq_assistant/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/intenthq/ihq_assistant/contents/{+path}",
      "compare_url": "https://api.github.com/repos/intenthq/ihq_assistant/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/intenthq/ihq_assistant/merges",
      "archive_url": "https://api.github.com/repos/intenthq/ihq_assistant/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/intenthq/ihq_assistant/downloads",
      "issues_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues{/number}",
      "pulls_url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/intenthq/ihq_assistant/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/intenthq/ihq_assistant/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/intenthq/ihq_assistant/labels{/name}",
      "releases_url": "https://api.github.com/repos/intenthq/ihq_assistant/releases{/id}",
      "deployments_url": "https://api.github.com/repos/intenthq/ihq_assistant/deployments",
      "created_at": "2025-03-04T09:53:32Z",
      "updated_at": "2025-03-04T16:54:42Z",
      "pushed_at": "2025-03-05T07:00:32Z",
      "git_url": "git://github.com/intenthq/ihq_assistant.git",
      "ssh_url": "git@github.com:intenthq/ihq_assistant.git",
      "clone_url": "https://github.com/intenthq/ihq_assistant.git",
      "svn_url": "https://github.com/intenthq/ihq_assistant",
      "homepage": null,
      "size": 9577,
      "stargazers_count": 0,
      "watchers_count": 0,
      "language": "Python",
      "has_issues": true,
      "has_projects": true,
      "has_downloads": true,
      "has_wiki": true,
      "has_pages": false,
      "has_discussions": false,
      "forks_count": 0,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 3,
      "license": null,
      "allow_forking": true,
      "is_template": false,
      "web_commit_signoff_required": false,
      "topics": [],
      "visibility": "public",
      "forks": 0,
      "open_issues": 3,
      "watchers": 0,
      "default_branch": "main"
    }
  },
  "base": {
    "label": "intenthq:main",
    "ref": "main",
    "sha": "b1c20f7f0a1c7e8896177a425a04f3973b89bed2",
    "user": {
      "login": "intenthq",
      "id": 4499919,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ0OTk5MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4499919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/intenthq",
      "html_url": "https://github.com/intenthq",
      "followers_url": "https://api.github.com/users/intenthq/followers",
      "following_url": "https://api.github.com/users/intenthq/following{/other_user}",
      "gists_url": "https://api.github.com/users/intenthq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/intenthq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/intenthq/subscriptions",
      "organizations_url": "https://api.github.com/users/intenthq/orgs",
      "repos_url": "https://api.github.com/users/intenthq/repos",
      "events_url": "https://api.github.com/users/intenthq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/intenthq/received_events",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "repo": {
      "id": 942562478,
      "node_id": "R_kgDOOC5crg",
      "name": "ihq_assistant",
      "full_name": "intenthq/ihq_assistant",
      "private": false,
      "owner": {
        "login": "intenthq",
        "id": 4499919,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ0OTk5MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4499919?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/intenthq",
        "html_url": "https://github.com/intenthq",
        "followers_url": "https://api.github.com/users/intenthq/followers",
        "following_url": "https://api.github.com/users/intenthq/following{/other_user}",
        "gists_url": "https://api.github.com/users/intenthq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/intenthq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/intenthq/subscriptions",
        "organizations_url": "https://api.github.com/users/intenthq/orgs",
        "repos_url": "https://api.github.com/users/intenthq/repos",
        "events_url": "https://api.github.com/users/intenthq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/intenthq/received_events",
        "type": "Organization",
        "user_view_type": "public",
        "site_admin": false
      },
      "html_url": "https://github.com/intenthq/ihq_assistant",
      "description": "Hackathon Group 2 ",
      "fork": false,
      "url": "https://api.github.com/repos/intenthq/ihq_assistant",
      "forks_url": "https://api.github.com/repos/intenthq/ihq_assistant/forks",
      "keys_url": "https://api.github.com/repos/intenthq/ihq_assistant/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/intenthq/ihq_assistant/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/intenthq/ihq_assistant/teams",
      "hooks_url": "https://api.github.com/repos/intenthq/ihq_assistant/hooks",
      "issue_events_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/events{/number}",
      "events_url": "https://api.github.com/repos/intenthq/ihq_assistant/events",
      "assignees_url": "https://api.github.com/repos/intenthq/ihq_assistant/assignees{/user}",
      "branches_url": "https://api.github.com/repos/intenthq/ihq_assistant/branches{/branch}",
      "tags_url": "https://api.github.com/repos/intenthq/ihq_assistant/tags",
      "blobs_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/intenthq/ihq_assistant/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/intenthq/ihq_assistant/languages",
      "stargazers_url": "https://api.github.com/repos/intenthq/ihq_assistant/stargazers",
      "contributors_url": "https://api.github.com/repos/intenthq/ihq_assistant/contributors",
      "subscribers_url": "https://api.github.com/repos/intenthq/ihq_assistant/subscribers",
      "subscription_url": "https://api.github.com/repos/intenthq/ihq_assistant/subscription",
      "commits_url": "https://api.github.com/repos/intenthq/ihq_assistant/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/intenthq/ihq_assistant/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/intenthq/ihq_assistant/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/intenthq/ihq_assistant/contents/{+path}",
      "compare_url": "https://api.github.com/repos/intenthq/ihq_assistant/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/intenthq/ihq_assistant/merges",
      "archive_url": "https://api.github.com/repos/intenthq/ihq_assistant/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/intenthq/ihq_assistant/downloads",
      "issues_url": "https://api.github.com/repos/intenthq/ihq_assistant/issues{/number}",
      "pulls_url": "https://api.github.com/repos/intenthq/ihq_assistant/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/intenthq/ihq_assistant/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/intenthq/ihq_assistant/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/intenthq/ihq_assistant/labels{/name}",
      "releases_url": "https://api.github.com/repos/intenthq/ihq_assistant/releases{/id}",
      "deployments_url": "https://api.github.com/repos/intenthq/ihq_assistant/deployments",
      "created_at": "2025-03-04T09:53:32Z",
      "updated_at": "2025-03-04T16:54:42Z",
      "pushed_at": "2025-03-05T07:00:32Z",
      "git_url": "git://github.com/intenthq/ihq_assistant.git",
      "ssh_url": "git@github.com:intenthq/ihq_assistant.git",
      "clone_url": "https://github.com/intenthq/ihq_assistant.git",
      "svn_url": "https://github.com/intenthq/ihq_assistant",
      "homepage": null,
      "size": 9577,
      "stargazers_count": 0,
      "watchers_count": 0,
      "language": "Python",
      "has_issues": true,
      "has_projects": true,
      "has_downloads": true,
      "has_wiki": true,
      "has_pages": false,
      "has_discussions": false,
      "forks_count": 0,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 3,
      "license": null,
      "allow_forking": true,
      "is_template": false,
      "web_commit_signoff_required": false,
      "topics": [],
      "visibility": "public",
      "forks": 0,
      "open_issues": 3,
      "watchers": 0,
      "default_branch": "main"
    }
  },
  "_links": {
    "self": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8"
    },
    "html": {
      "href": "https://github.com/intenthq/ihq_assistant/pull/8"
    },
    "issue": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/issues/8"
    },
    "comments": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/issues/8/comments"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8/comments"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/comments{/number}"
    },
    "commits": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/pulls/8/commits"
    },
    "statuses": {
      "href": "https://api.github.com/repos/intenthq/ihq_assistant/statuses/2e964f22deb60da0538c6a6c54e35386338500ca"
    }
  },
  "author_association": "COLLABORATOR",
  "auto_merge": null,
  "active_lock_reason": null,
  "merged": false,
  "mergeable": true,
  "rebaseable": true,
  "mergeable_state": "clean",
  "merged_by": null,
  "comments": 0,
  "review_comments": 0,
  "maintainer_can_modify": false,
  "commits": 2,
  "additions": 157,
  "deletions": 9,
  "changed_files": 2,
  "files": [
    {
      "sha": "c0d0339f1e246189d392a18b119f1cb66b0f1adf",
      "filename": "llm_tools.py",
      "status": "added",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/intenthq/ihq_assistant/blob/2e964f22deb60da0538c6a6c54e35386338500ca/llm_tools.py",
      "raw_url": "https://github.com/intenthq/ihq_assistant/raw/2e964f22deb60da0538c6a6c54e35386338500ca/llm_tools.py",
      "contents_url": "https://api.github.com/repos/intenthq/ihq_assistant/contents/llm_tools.py?ref=2e964f22deb60da0538c6a6c54e35386338500ca",
      "patch": "@@ -0,0 +1,102 @@\n+import os\n+import json\n+import requests\n+from openai import OpenAI\n+\n+# Define the function to create a Linear ticket\n+def create_linear_ticket(title: str, description: str, priority: int, linear_api_key: str) -> dict:\n+    \"\"\"\n+    Creates a new Linear ticket using the given title, description, and priority.\n+\n+    Args:\n+        title (str): The title of the Linear ticket.\n+        description (str): A detailed description of the ticket.\n+        priority (int): Priority level (0 = No priority, 1 = Low, 2 = Medium, 3 = High, 4 = Urgent).\n+\n+    Returns:\n+        dict: A dictionary containing ticket details formatted for Linear API.\n+    \"\"\"\n+    TEAM_ID = '16b9a385-762f-47b0-b5d8-73ece3125bd9'\n+    API_URL = 'https://api.linear.app/graphql'\n+    headers = {\n+        'Authorization': linear_api_key,\n+        'Content-Type': 'application/json'\n+    }\n+\n+    issue_data = {\n+        \"title\": title,\n+        \"description\": description,\n+        \"teamId\": TEAM_ID,\n+        \"priority\": priority\n+    }\n+\n+    # GraphQL mutation for creating an issue\n+    mutation = \"\"\"\n+    mutation CreateIssue($input: IssueCreateInput!) {\n+      issueCreate(input: $input) {\n+        success\n+        issue {\n+          id\n+          title\n+          description\n+          url\n+        }\n+      }\n+    }\n+    \"\"\"\n+\n+    # Make the API request\n+    response = requests.post(\n+        API_URL,\n+        json={\"query\": mutation, \"variables\": {\"input\": issue_data}},\n+        headers=headers\n+    )\n+\n+    if response.status_code == 200:\n+        data = response.json()\n+        if data.get('data', {}).get('issueCreate', {}).get('success'):\n+            issue = data['data']['issueCreate']['issue']\n+            return {\n+                \"success\": True,\n+                \"issue\": {\n+                    \"id\": issue['id'],\n+                    \"title\": issue['title'],\n+                    \"description\": issue['description'],\n+                    \"url\": issue['url']\n+                }\n+            }\n+        else:\n+            return {\"success\": False, \"error\": \"Issue creation failed.\"}\n+    else:\n+        return {\"success\": False, \"error\": response.text}\n+\n+# Define the function specification for OpenAI\n+tools = [\n+    {\n+        \"type\": \"function\",  # Specify the type as 'function'\n+        \"function\": {\n+            \"name\": \"create_linear_ticket\",\n+            \"description\": \"Creates a new Linear ticket with the given title, description, and priority.\",\n+            \"parameters\": {\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\n+                        \"type\": \"string\",\n+                        \"description\": \"The title of the Linear ticket\"\n+                    },\n+                    \"description\": {\n+                        \"type\": \"string\",\n+                        \"description\": \"A detailed description of the issue or task.\"\n+                    },\n+                    \"priority\": {\n+                        \"type\": \"integer\",\n+                        \"description\": \"The priority level of the issue. (0 = No priority, 1 = Low, 2 = Medium, 3 = High, 4 = Urgent)\",\n+                        \"enum\": [0, 1, 2, 3, 4]\n+                    }\n+                },\n+                \"required\": [\"title\", \"description\", \"priority\"]\n+            }\n+        }\n+    }\n+]\n+"
    },
    {
      "sha": "36a48ec56d4e723976d06e2d45059ff233aeacba",
      "filename": "slack_faiss_bot.py",
      "status": "modified",
      "additions": 55,
      "deletions": 9,
      "changes": 64,
      "blob_url": "https://github.com/intenthq/ihq_assistant/blob/2e964f22deb60da0538c6a6c54e35386338500ca/slack_faiss_bot.py",
      "raw_url": "https://github.com/intenthq/ihq_assistant/raw/2e964f22deb60da0538c6a6c54e35386338500ca/slack_faiss_bot.py",
      "contents_url": "https://api.github.com/repos/intenthq/ihq_assistant/contents/slack_faiss_bot.py?ref=2e964f22deb60da0538c6a6c54e35386338500ca",
      "patch": "@@ -1,4 +1,5 @@\n import os\n+import json\n import faiss\n import numpy as np\n import openai\n@@ -16,6 +17,9 @@\n from langchain.chains import LLMChain\n from langchain.prompts import PromptTemplate\n \n+from openai import OpenAI\n+from llm_tools import create_linear_ticket, tools \n+\n # Load environment variables from .env file\n load_dotenv()\n \n@@ -27,9 +31,12 @@\n SLACK_BOT_TOKEN = os.getenv(\"SLACK_BOT_TOKEN\")\n SLACK_APP_TOKEN = os.getenv(\"SLACK_APP_TOKEN\")\n OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n+LINEAR_API_KEY = os.environ.get(\"LINEAR_API_KEY\")\n+OPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\n \n # Configure OpenAI API Key\n openai.api_key = OPENAI_API_KEY\n+client = OpenAI()\n \n # Enable debug logging\n logging.basicConfig(level=logging.DEBUG)\n@@ -47,6 +54,40 @@ def get_embedding(text):\n # Initialize Slack App\n app = App(token=SLACK_BOT_TOKEN)\n \n+def parse_chat_history(chat_history_raw):\n+    chat_history = []\n+    for message in chat_history_raw:\n+        chat_history.append({\"role\": \"user\", \"content\": message})\n+    return chat_history\n+\n+def get_prompt_messages(chat_history, question, context):\n+    messages = [\n+        {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"}, # update this system prompt more\n+    ]\n+    messages.extend(chat_history)\n+    messages.extend({\"role\": \"developer\", \"content\": f\"This is the relevant context for you to answer the users query: {context}\"})\n+    messages.extend({\"role\": \"user\", \"content\": question})\n+    return messages\n+\n+def chat_openai(messages, tools, model=\"gpt-4o-mini\"):\n+    response = client.chat.completions.create(\n+        model=model,\n+        messages=messages,\n+        tools=tools\n+    )\n+    return response.choices[0].message\n+\n+def implement_linear_function(function_args):\n+    function_args = json.loads(function_args)\n+    result = create_linear_ticket(\n+        title=function_args.get(\"title\"),\n+        description=function_args.get(\"description\"),\n+        priority=function_args.get(\"priority\"),\n+        linear_api_key=LINEAR_API_KEY\n+    )\n+    second_message = f\"A ticket as been created here: {result['issue']['url']}\"\n+    return second_message\n+\n # Function to search FAISS\n def search_faiss(query, channel_id):\n     embeddings = OpenAIEmbeddings()\n@@ -60,17 +101,22 @@ def search_faiss(query, channel_id):\n     logging.debug(f\"Doc sources: {';'.join([d.metadata['source'] for d in docs])}\")\n \n     # Retrieve last 5 messages from memory for this channel\n-    chat_history = \"\\n\".join(mention_memory.get(channel_id, []))\n+    # chat_history = \"\\n\".join(mention_memory.get(channel_id, []))\n+    chat_history = mention_memory.get(channel_id, [])\n+    chat_history = parse_chat_history(chat_history)\n     logging.debug(f\"🔹 Chat History for channel {channel_id}: {chat_history}\")\n \n-    llm = init_chat_model(\"gpt-4\", model_provider=\"openai\")\n-    prompt_template = PromptTemplate(\n-        input_variables=[\"chat_history\", \"question\", \"context\"],\n-        template=\"{chat_history}\\nUser: {question}\\nContext: {context}\\nAssistant:\"\n-    )\n-    chain = LLMChain(llm=llm, prompt=prompt_template)\n-\n-    response = chain.run(chat_history=chat_history, question=query, context=docs_content)\n+    messages = get_prompt_messages(chat_history, query, docs_content)\n+    response = chat_openai(messages, tools)\n+\n+    if response.tool_calls != None:\n+        function_name = response.tool_calls[0].function.name\n+        function_args = response.tool_calls[0].function.arguments\n+        if function_name == \"create_linear_ticket\":\n+            try:\n+                response = implement_linear_function(function_args)\n+            except:\n+                response = \"Sorry failed to create a ticket (still learning!) - can you ask again?\"\n \n     return response  # Fix: LLMChain outputs a string, no need for `.content`\n "
    }
  ],
  "raw_diff": "diff --git a/llm_tools.py b/llm_tools.py\nnew file mode 100644\nindex 0000000..c0d0339\n--- /dev/null\n+++ b/llm_tools.py\n@@ -0,0 +1,102 @@\n+import os\n+import json\n+import requests\n+from openai import OpenAI\n+\n+# Define the function to create a Linear ticket\n+def create_linear_ticket(title: str, description: str, priority: int, linear_api_key: str) -> dict:\n+    \"\"\"\n+    Creates a new Linear ticket using the given title, description, and priority.\n+\n+    Args:\n+        title (str): The title of the Linear ticket.\n+        description (str): A detailed description of the ticket.\n+        priority (int): Priority level (0 = No priority, 1 = Low, 2 = Medium, 3 = High, 4 = Urgent).\n+\n+    Returns:\n+        dict: A dictionary containing ticket details formatted for Linear API.\n+    \"\"\"\n+    TEAM_ID = '16b9a385-762f-47b0-b5d8-73ece3125bd9'\n+    API_URL = 'https://api.linear.app/graphql'\n+    headers = {\n+        'Authorization': linear_api_key,\n+        'Content-Type': 'application/json'\n+    }\n+\n+    issue_data = {\n+        \"title\": title,\n+        \"description\": description,\n+        \"teamId\": TEAM_ID,\n+        \"priority\": priority\n+    }\n+\n+    # GraphQL mutation for creating an issue\n+    mutation = \"\"\"\n+    mutation CreateIssue($input: IssueCreateInput!) {\n+      issueCreate(input: $input) {\n+        success\n+        issue {\n+          id\n+          title\n+          description\n+          url\n+        }\n+      }\n+    }\n+    \"\"\"\n+\n+    # Make the API request\n+    response = requests.post(\n+        API_URL,\n+        json={\"query\": mutation, \"variables\": {\"input\": issue_data}},\n+        headers=headers\n+    )\n+\n+    if response.status_code == 200:\n+        data = response.json()\n+        if data.get('data', {}).get('issueCreate', {}).get('success'):\n+            issue = data['data']['issueCreate']['issue']\n+            return {\n+                \"success\": True,\n+                \"issue\": {\n+                    \"id\": issue['id'],\n+                    \"title\": issue['title'],\n+                    \"description\": issue['description'],\n+                    \"url\": issue['url']\n+                }\n+            }\n+        else:\n+            return {\"success\": False, \"error\": \"Issue creation failed.\"}\n+    else:\n+        return {\"success\": False, \"error\": response.text}\n+\n+# Define the function specification for OpenAI\n+tools = [\n+    {\n+        \"type\": \"function\",  # Specify the type as 'function'\n+        \"function\": {\n+            \"name\": \"create_linear_ticket\",\n+            \"description\": \"Creates a new Linear ticket with the given title, description, and priority.\",\n+            \"parameters\": {\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\n+                        \"type\": \"string\",\n+                        \"description\": \"The title of the Linear ticket\"\n+                    },\n+                    \"description\": {\n+                        \"type\": \"string\",\n+                        \"description\": \"A detailed description of the issue or task.\"\n+                    },\n+                    \"priority\": {\n+                        \"type\": \"integer\",\n+                        \"description\": \"The priority level of the issue. (0 = No priority, 1 = Low, 2 = Medium, 3 = High, 4 = Urgent)\",\n+                        \"enum\": [0, 1, 2, 3, 4]\n+                    }\n+                },\n+                \"required\": [\"title\", \"description\", \"priority\"]\n+            }\n+        }\n+    }\n+]\n+\ndiff --git a/slack_faiss_bot.py b/slack_faiss_bot.py\nindex 21fa2a2..36a48ec 100644\n--- a/slack_faiss_bot.py\n+++ b/slack_faiss_bot.py\n@@ -1,4 +1,5 @@\n import os\n+import json\n import faiss\n import numpy as np\n import openai\n@@ -16,6 +17,9 @@\n from langchain.chains import LLMChain\n from langchain.prompts import PromptTemplate\n \n+from openai import OpenAI\n+from llm_tools import create_linear_ticket, tools \n+\n # Load environment variables from .env file\n load_dotenv()\n \n@@ -27,9 +31,12 @@\n SLACK_BOT_TOKEN = os.getenv(\"SLACK_BOT_TOKEN\")\n SLACK_APP_TOKEN = os.getenv(\"SLACK_APP_TOKEN\")\n OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n+LINEAR_API_KEY = os.environ.get(\"LINEAR_API_KEY\")\n+OPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\n \n # Configure OpenAI API Key\n openai.api_key = OPENAI_API_KEY\n+client = OpenAI()\n \n # Enable debug logging\n logging.basicConfig(level=logging.DEBUG)\n@@ -47,6 +54,40 @@ def get_embedding(text):\n # Initialize Slack App\n app = App(token=SLACK_BOT_TOKEN)\n \n+def parse_chat_history(chat_history_raw):\n+    chat_history = []\n+    for message in chat_history_raw:\n+        chat_history.append({\"role\": \"user\", \"content\": message})\n+    return chat_history\n+\n+def get_prompt_messages(chat_history, question, context):\n+    messages = [\n+        {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"}, # update this system prompt more\n+    ]\n+    messages.extend(chat_history)\n+    messages.extend({\"role\": \"developer\", \"content\": f\"This is the relevant context for you to answer the users query: {context}\"})\n+    messages.extend({\"role\": \"user\", \"content\": question})\n+    return messages\n+\n+def chat_openai(messages, tools, model=\"gpt-4o-mini\"):\n+    response = client.chat.completions.create(\n+        model=model,\n+        messages=messages,\n+        tools=tools\n+    )\n+    return response.choices[0].message\n+\n+def implement_linear_function(function_args):\n+    function_args = json.loads(function_args)\n+    result = create_linear_ticket(\n+        title=function_args.get(\"title\"),\n+        description=function_args.get(\"description\"),\n+        priority=function_args.get(\"priority\"),\n+        linear_api_key=LINEAR_API_KEY\n+    )\n+    second_message = f\"A ticket as been created here: {result['issue']['url']}\"\n+    return second_message\n+\n # Function to search FAISS\n def search_faiss(query, channel_id):\n     embeddings = OpenAIEmbeddings()\n@@ -60,17 +101,22 @@ def search_faiss(query, channel_id):\n     logging.debug(f\"Doc sources: {';'.join([d.metadata['source'] for d in docs])}\")\n \n     # Retrieve last 5 messages from memory for this channel\n-    chat_history = \"\\n\".join(mention_memory.get(channel_id, []))\n+    # chat_history = \"\\n\".join(mention_memory.get(channel_id, []))\n+    chat_history = mention_memory.get(channel_id, [])\n+    chat_history = parse_chat_history(chat_history)\n     logging.debug(f\"🔹 Chat History for channel {channel_id}: {chat_history}\")\n \n-    llm = init_chat_model(\"gpt-4\", model_provider=\"openai\")\n-    prompt_template = PromptTemplate(\n-        input_variables=[\"chat_history\", \"question\", \"context\"],\n-        template=\"{chat_history}\\nUser: {question}\\nContext: {context}\\nAssistant:\"\n-    )\n-    chain = LLMChain(llm=llm, prompt=prompt_template)\n-\n-    response = chain.run(chat_history=chat_history, question=query, context=docs_content)\n+    messages = get_prompt_messages(chat_history, query, docs_content)\n+    response = chat_openai(messages, tools)\n+\n+    if response.tool_calls != None:\n+        function_name = response.tool_calls[0].function.name\n+        function_args = response.tool_calls[0].function.arguments\n+        if function_name == \"create_linear_ticket\":\n+            try:\n+                response = implement_linear_function(function_args)\n+            except:\n+                response = \"Sorry failed to create a ticket (still learning!) - can you ask again?\"\n \n     return response  # Fix: LLMChain outputs a string, no need for `.content`\n \n"
}